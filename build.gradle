plugins {
    id 'java'
    id 'application'
    id 'base'
    id 'nebula.lint' version '17.0.0'
    id 'com.github.hierynomus.license' version '0.15.0'
}

apply plugin: 'java'
apply plugin: 'base'
apply plugin: 'nebula.lint'
apply plugin: 'com.github.hierynomus.license'
apply plugin: "application"

repositories {
    mavenLocal()
    jcenter()
}

dependencies {
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.4'
    implementation 'org.jasypt:jasypt:1.9.3'
    runtimeOnly 'org.slf4j:slf4j-simple:1.7.31'
    testImplementation "junit:junit:$junitVersion"
}

group = 'org.apereo.openequella.adminconsole'
version = System.getenv("TRAVIS_TAG") ?: artifactVersion
mainClassName = 'org.apereo.openequella.adminconsole.launcher.ClientLauncher'

// Gradlelint is broken: https://github.com/nebula-plugins/gradle-lint-plugin/issues/203
gradleLint.rules = [/*'all-dependency', */'dependency-parentheses', 'duplicate-dependency-class']

license {
    strictCheck
    header = file('LICENSE')
}

jar {
    archiveFileName = 'admin.jar'
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Main-Class': mainClassName,
                "Class-Path": configurations.runtimeClasspath.files.collect { it.getName() }.join(' '))
    }
}

final jreDownloadDir = file("$buildDir/jre-downloads")
final jreExtractDir = {sys -> "${jreDownloadDir.absolutePath}/jre/${sys}"}
final jarDir = "${buildDir}/libs"
final launcherScripts = [
    windows: 'Windows-launcher.bat',
    linux: 'Linux-launcher.sh',
    mac: 'Mac-launcher.sh'
]

class JreProperties {
    String hash
    String fileName
    String getDownloadUrl() {"https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u242-b08/${fileName}"}
    File getJre() {new File("build/jre-downloads/${fileName}")}
}

final jreProperties = [
    windows: new JreProperties(
            hash: 'b00c361e6ce022c6dc63b7c747cfdd9d28c17943e50bc1855adf36854ce46898',
            fileName: 'OpenJDK8U-jre_x64_windows_hotspot_8u242b08.zip'),
    linux: new JreProperties(
            hash: '5edfaefdbb0469d8b24d61c8aef80c076611053b1738029c0232b9a632fe2708',
            fileName: 'OpenJDK8U-jre_x64_linux_hotspot_8u242b08.tar.gz'),
    mac: new JreProperties(
            hash: 'fae3777e3441dc7384c339a9054aa7efc40cd2c501625a535c2d4648367ccca3',
            fileName: 'OpenJDK8U-jre_x64_mac_hotspot_8u242b08.tar.gz')
]

task copyDependencies(type: Copy, description: 'Copy dependencies to /build/libs') {
    from configurations.default
    into(jarDir)
}

task downloadJre(description: 'Download OpenJRE of Linux, Windows and Mac') {
    doFirst {
        if (!jreDownloadDir.exists()) {
            jreDownloadDir.mkdirs()
        }
        // Filter out entries that already have JRE downloaded
        jreProperties.findAll {String sys, JreProperties props -> !props.jre.exists()}
                .collect {String sys, JreProperties props ->
            Thread.start {
                println("Start downloading OpenJRE for ${sys}...")
                new URL(props.downloadUrl as String).withInputStream {
                    props.jre.newOutputStream() << it
                }
            }
        }*.join()
    }
}
// Execute downloadJre only when any one of three JREs is missing
downloadJre.onlyIf {
    jreProperties.any {sys,props ->
        !props.jre.exists()
    }
}

import java.security.MessageDigest
static String calculateHash(File jre) {
    MessageDigest.getInstance('SHA-256').with {
        jre.eachByte(1024) {buff,len ->
            update(buff, 0, len)
        }
        digest().encodeHex() as String
    }
}

task checkJre(dependsOn: downloadJre, description: 'Check if the hash of each JRE is correct') {
    doFirst {
        if (jreProperties.any { String sys, JreProperties props ->
            props.hash != calculateHash(props.jre)
        }) {
            throw new GradleException("Hash mismatch for downloaded JRE. Files may have been modified.")
        }
    }
}
// Execute checkJre only when downloadJre was not skipped
checkJre.onlyIf {
    downloadJre.didWork
}

task unzipJre(description: 'Unzip a JRE when the extract directory is missing', dependsOn: checkJre) {
    doFirst {
        // Find out unzipped JREs and extract them
        jreProperties.findAll {String sys, JreProperties props ->
            !new File(jreExtractDir(sys)).exists()
        }.each {String sys, JreProperties props ->
            println "Unzip JRE for ${sys}"
            if (props.jre.name.endsWith('zip')) {
                copy {
                    from zipTree(props.jre)
                    into file(jreExtractDir(sys))
                }
            } else {
                copy {
                    from tarTree(resources.gzip(props.jre))
                    into file(jreExtractDir(sys))
                }
            }
        }
    }
}
// Execute unzipJre only when any one of three JRE extract folders is missing
unzipJre.onlyIf {
    jreProperties.any {String sys, JreProperties props->
        !new File(jreExtractDir(sys)).exists()
    }
}

distributions {
    launcherScripts.each { String sys, String scriptFileName ->
        String scriptFileDir = "${projectDir}/launcher-scripts/${scriptFileName}"
        "${sys}Packages" {
            baseName = "admin-console-package-for-${sys}"
            contents {
                from("${buildDir}") {
                    include "libs/*"
                }
                from {file(jreExtractDir(sys))}
                from {file(scriptFileDir)}
            }
        }
    }
}

Object[] dependentTasks = [unzipJre,copyDependencies]
build.dependsOn(dependentTasks)

// We want TAR files to be compressed by GZIP with the file extension of '.tar.gz'
tasks.withType(Tar){
    compression = Compression.GZIP
    archiveExtension = 'tar.gz'
}

// We do not need the default distributions that have no JRE bundled
distTar.enabled = false
distZip.enabled = false

// We do not need tar for Windows and zip for both Mac and Linux.
windowsPackagesDistTar.enabled = false
linuxPackagesDistZip.enabled = false
macPackagesDistZip.enabled = false

// These plugin-generated distribution tasks must run after JREs are downloaded and unzipped.
linuxPackagesDistTar.mustRunAfter(dependentTasks)
macPackagesDistTar.mustRunAfter(dependentTasks)
windowsPackagesDistZip.mustRunAfter(dependentTasks)
